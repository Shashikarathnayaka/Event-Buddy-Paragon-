// import 'dart:convert';
// import 'dart:io';
// import 'package:firebase_messaging/firebase_messaging.dart';
// import 'package:flutter/material.dart';
// import 'package:flutter_local_notifications/flutter_local_notifications.dart';

// class PushNotificationService {
//   static final FirebaseMessaging _firebaseMessaging = FirebaseMessaging.instance;
//   static final FlutterLocalNotificationsPlugin _localNotifications = FlutterLocalNotificationsPlugin();
  
//   // Initialize push notifications
//   static Future<void> initialize() async {
//     // Request permission for iOS
//     NotificationSettings settings = await _firebaseMessaging.requestPermission(
//       alert: true,
//       badge: true,
//       sound: true,
//       provisional: false,
//     );

//     if (settings.authorizationStatus == AuthorizationStatus.authorized) {
//       print('User granted permission');
//     } else {
//       print('User declined or has not accepted permission');
//     }

//     // Initialize local notifications
//     await _initializeLocalNotifications();

//     // Get the token
//     String? token = await _firebaseMessaging.getToken();
//     print("FCM Token: $token");
//     // Save this token to your database/backend

//     // Handle background messages
//     FirebaseMessaging.onBackgroundMessage(_handleBackgroundMessage);

//     // Handle foreground messages
//     FirebaseMessaging.onMessage.listen(_handleForegroundMessage);

//     // Handle notification tap when app is in background/terminated
//     FirebaseMessaging.onMessageOpenedApp.listen(_handleMessageOpenedApp);

//     // Handle notification tap when app is terminated
//     RemoteMessage? initialMessage = await _firebaseMessaging.getInitialMessage();
//     if (initialMessage != null) {
//       _handleMessageOpenedApp(initialMessage);
//     }

//     // Handle token refresh
//     _firebaseMessaging.onTokenRefresh.listen((token) {
//       print("New FCM Token: $token");
//       // Update token in your database
//     });
//   }

//   // Initialize local notifications
//   static Future<void> _initializeLocalNotifications() async {
//     const AndroidInitializationSettings initializationSettingsAndroid =
//         AndroidInitializationSettings('@mipmap/ic_launcher');

//     const DarwinInitializationSettings initializationSettingsDarwin =
//         DarwinInitializationSettings(
//       requestSoundPermission: true,
//       requestBadgePermission: true,
//       requestAlertPermission: true,
//     );

//     const InitializationSettings initializationSettings = InitializationSettings(
//       android: initializationSettingsAndroid,
//       iOS: initializationSettingsDarwin,
//     );

//     await _localNotifications.initialize(
//       initializationSettings,
//       onDidReceiveNotificationResponse: _onNotificationTapped,
//     );

//     // Create notification channel for Android
//     const AndroidNotificationChannel channel = AndroidNotificationChannel(
//       'high_importance_channel',
//       'High Importance Notifications',
//       description: 'This channel is used for important notifications.',
//       importance: Importance.high,
//     );

//     await _localNotifications
//         .resolvePlatformSpecificImplementation<AndroidFlutterLocalNotificationsPlugin>()
//         ?.createNotificationChannel(channel);
//   }

//   // Handle background messages
//   static Future<void> _handleBackgroundMessage(RemoteMessage message) async {
//     print("Handling a background message: ${message.messageId}");
//     print("Message data: ${message.data}");
//     print("Message notification: ${message.notification?.title}");
//   }

//   // Handle foreground messages
//   static Future<void> _handleForegroundMessage(RemoteMessage message) async {
//     print("Handling a foreground message: ${message.messageId}");
    
//     // Show local notification when app is in foreground
//     await _showLocalNotification(message);
//   }

//   // Show local notification
//   static Future<void> _showLocalNotification(RemoteMessage message) async {
//     const AndroidNotificationDetails androidPlatformChannelSpecifics =
//         AndroidNotificationDetails(
//       'high_importance_channel',
//       'High Importance Notifications',
//       channelDescription: 'This channel is used for important notifications.',
//       importance: Importance.high,
//       priority: Priority.high,
//       icon: '@mipmap/ic_launcher',
//     );

//     const DarwinNotificationDetails darwinPlatformChannelSpecifics =
//         DarwinNotificationDetails(
//       presentAlert: true,
//       presentBadge: true,
//       presentSound: true,
//     );

//     const NotificationDetails platformChannelSpecifics = NotificationDetails(
//       android: androidPlatformChannelSpecifics,
//       iOS: darwinPlatformChannelSpecifics,
//     );

//     await _localNotifications.show(
//       message.hashCode,
//       message.notification?.title ?? 'New Notification',
//       message.notification?.body ?? 'You have a new message',
//       platformChannelSpecifics,
//       payload: jsonEncode(message.data),
//     );
//   }

//   // Handle notification tap
//   static void _onNotificationTapped(NotificationResponse response) {
//     print("Notification tapped with payload: ${response.payload}");
    
//     if (response.payload != null) {
//       Map<String, dynamic> data = jsonDecode(response.payload!);
//       // Navigate to specific screen based on data
//       _handleNotificationNavigation(data);
//     }
//   }

//   // Handle message opened app
//   static void _handleMessageOpenedApp(RemoteMessage message) {
//     print("Message clicked: ${message.messageId}");
//     _handleNotificationNavigation(message.data);
//   }

//   // Handle navigation based on notification data
//   static void _handleNotificationNavigation(Map<String, dynamic> data) {
//     // Example navigation logic
//     String? type = data['type'];
//     String? id = data['id'];
    
//     switch (type) {
//       case 'chat':
//         // Navigate to chat screen
//         print("Navigate to chat with id: $id");
//         break;
//       case 'order':
//         // Navigate to order screen
//         print("Navigate to order with id: $id");
//         break;
//       default:
//         // Navigate to home or default screen
//         print("Navigate to home screen");
//     }
//   }

//   // Get FCM token
//   static Future<String?> getToken() async {
//     return await _firebaseMessaging.getToken();
//   }

//   // Subscribe to event-specific topics
//   static Future<void> subscribeToTopic(String topic) async {
//     await _firebaseMessaging.subscribeToTopic(topic);
//     print("Subscribed to topic: $topic");
//     _showToast('Subscribed to $topic notifications', ToastificationType.success);
//   }

//   // Unsubscribe from topics  
//   static Future<void> unsubscribeFromTopic(String topic) async {
//     await _firebaseMessaging.unsubscribeFromTopic(topic);
//     print("Unsubscribed from topic: $topic");
//     _showToast('Unsubscribed from $topic notifications', ToastificationType.info);
//   }

//   // Subscribe to event buddy specific topics
//   static Future<void> subscribeToEventBuddyTopics() async {
//     await subscribeToTopic('event_updates');
//     await subscribeToTopic('buddy_requests');
//     await subscribeToTopic('general_announcements');
//   }

//   // Unsubscribe from all event buddy topics
//   static Future<void> unsubscribeFromAllTopics() async {
//     await unsubscribeFromTopic('event_updates');
//     await unsubscribeFromTopic('buddy_requests'); 
//     await unsubscribeFromTopic('general_announcements');
//   }
// }